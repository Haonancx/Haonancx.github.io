---
layout: post
title:  "组件化架构漫谈"
date:   2017-6-1 23:16:15
categories: 随笔 架构 浅谈前端
tags: 随笔 架构 浅谈前端
---
#### 有时候计划总是赶不上变化。

![mid-year-summary](http://i.imgur.com/KOIsLV1.jpg)

在项目趋于稳定迭代的情况下，上周与团队分享了我的架构设计，反响很好，梳理自己的知识结构总是好的。


### 架构认知


很多人把架构师当成一个最终的职业目标或者一个很牛的职业，其实在生活中每个人都是架构师，不分职业，不分种族。

比如，你能把家里的家具摆放的位置能够方便你平时生活起居的使用，那么你也在扮演着生活架构师的角色，而有的人生活用品、家具摆放的一团糟，看起来很凌乱，但是他（她）却很方便的生活下去，反而你帮忙整理好了以后却找不到他想要的东西了，这对于他（她）来说，"凌乱"也是适合他（她）的架构，毕竟这种生活方式适合他（她）。

架构的本质是什么？有人说是管理，对机器和代码的管理，架构师的职责是遵循架构的原则，开发和完善各种开发工具、自动化工作流，设计项目架构，提高整个团队的开发效率，让团队成员可以更好的协同工作。

总结有一下几点：

- 每个系统都有一个架构
- 架构由架构元素以及相互之间的关系构成
- 系统是为了满足利益相关者（stakeholder）的需求而构建的
- 利益相关者都有自己的关注点（concerns）
- 架构由架构文档描述
- 架构文档描述了一系列的架构视角
- 每个视角都解决并且对应到利益相关者的关注点。


而在软件工程上，一个好的架构，就是深入浅出，而松耦合的，它能顺应业务的发展，弹性伸缩，当然，它的出世需要一个好的设计者，抽象出架构中生命周期和非生命周期部分，这无疑需要大量的系统切分经验和精通业务的能力。

架构系统前，架构师的首要任务是尽最大可能找出所有利益相关者，业务方，产品经理，客户/用户，开发经理，工程师，项目经理，测试人员，运维人员，产品运营人员等等都有可能是利益相关者，架构师要充分和利益相关者沟通，深入理解他们的关注点和痛点，并出架构解决这些关注点。

架构师常犯错误是漏掉重要的利益相关者，沟通不充分，都会造成架构有欠缺，不能满足利益相关者的需求。利益相关者的关注点是有可能冲突的，比如管理层（可管理性）vs技术方（性能），业务方（多快好省）vs 技术方（可靠稳定），这需要架构师去灵活平衡，如何平衡体现了架构师的水平和价值，所以一个经验老道的软件架构师，是能够让人员分工合作，且并行工作。


### 组件化的定义

组件化这个概念在后端早已盛行很多年，随着在近几年前端的发展，被频繁的提及和使用，组件化其实就是一个对业务界面的各个元素定义和归类的过程。


在分层和分模块后，每一个业务组件由三层各自存在的部署包组成，包本身是一个包含了技术组件和服务组件的一个结合体。

由数据层，逻辑层，界面层三层的三个业务包可以构成一个完整的具备独立功能的业务组件。

组件化分成文件和业务逻辑的组件化（标签化），其一是文件形式的，将各个单元从业务界面中拆分出来，存成一个个树状结构的文件，使用时通过路径去一一引用；其次是业务逻辑上的组件化，同样是把单元功能从业务界面中拆分出来，对同一类型的单元存入文件中，进而自定义标签，使用组件时只需引用标签即可。


这两种方式可以相辅相成，相互应用，其中怎么去使用，需要根据业务所设计的架构去权衡。

### 为什么组件化


#### 目的

归根结底，组件化的最终的目的分为以下两种：

- 提高生产的效率，不写重复的代码，从而提高项目的可维护性，降低维护成本。
- 按需分配和引用组件，性能调优掌握在自己手中。
- 组件间的通信。
- 组件化后，每层的职责更专一了，只需对组件进行单元测试的覆盖。

举个例子，在做中后台管理系统时，会遇到修改某个公用部分的情况，典型的有顶部导航、底部导航，如果项目小，工作量看起来不大，但一旦处于大型项目且业务比较复杂时，需要每个业务界面都要去一一修改，这无疑是增加了可维护的成本；

组件化就是最好的解决方案，将公用的部分从业务界面中解耦出来，如今前端都在这么做，将公共的部分抽成一个文件，在使用时只需修改一个文件的代码就够了。

所谓组件化，核心意义莫过于提取真正有复用价值的东西，其实不外乎下面四种：

- 控件（常用的表格、按钮、下拉框）
- 基础逻辑功能
- 公共样式
- 稳定的业务逻辑

#### 职责转换

早些年的架构设计比较多关注的是横向的分层，即数据层，逻辑层和UI层，也就是我们常说的 MVC(模型，视图，控制器)。

而组件化架构必须同时关注纵向的隔离和解耦，同样也引入了 MVC 的概念，但这是随应时代发展对结果导向。

由于 "用户体验" 时代的到来，人人都在谈体验，从而产品会更偏向与交互性的体验，从而使前端在现如今的发展中，从整个产品的架构中获得更多的控制权，典型的有：后端的路由控制交给了前端，从 前端（V）- 后端（MC）到 前端（VC）- 后端（M），让后端更专注于内存的使用和当好一个数据提供商。

### 如何组件化

组件化主要分为两种，全局组件化和局部组件化，对于一个有一定规模的 Web 应用来说，把所有东西都全局 "组件化" ，在管理上会有较大的便利性，但是带来的问题是，单元过于零散，需要详细的架构说明和文档，否则团队很难使用组件去组织新的应用体系；

局部组件化面临的是在架构方面生命周期和非生命周期权重的理解去拆分，如果生命周期比非生命周期的权重大时，则推荐局部组件化的方式，

#### 业务认知

什么叫业务？简而言之就是行业常识和经验，比如说，一个有经验的仓库保管员，可能文化程度不高，理解不了软件的运行原理之类，但一定对产品出库入库的流程非常熟悉，包括各种审批过程和异常状况；


但这些，程序员是不懂的。那如果要促进这个领域的信息化，程序员必然要学习业务，从理解刀耕火种的时代的业务流程，用计算机的编程的方式去实现这些业务流程。

#### 组件切分

这个时代，人们的主要关注点是数据驱动的界面，而现如今流行的的组件化方式主要有以下几种：

- shadow DOM 封装组件的内部结构
- Custom Element 对外提供组件的标签
- Template Element 定义组件的HTML模板
- HTML imports 控制组件的依赖加载

将业务界面拆分成单元组件，无非是为了不写重复代码，希望达到最大程度的代码复用的效果，但这仅仅只是代码和控件的的拆分，难点在于业务逻辑的拆分和业务逻辑上的架构，所以前端架构往往是业务和代码上的架构，这需要一个对业务理解透彻的代码的老手。

所以，组件化的本质目的并不一定是要为了可复用，而是提升可维护性。这一点正如面向对象语言，Java 要比 C++ 纯粹，因为它不允许例外情况的出现，连 main 函数都必须写到某个类里，所以 Java 是纯面向对象语言，而 C++ 不是。

举个例子，我们如何把一个业务界面切割成组件。



### 架构的基础构建

自动化构建工具的出现有效地解决了前端开发中的效率问题，至于工具的选择，前端架构需要调研每种工具的特点，评估其优点和缺点，根据项目的需求选择更加适合的工具。


要知道，模块边界的划分，不只是一个人的事情，在架构实施时，团队中每个代码的贡献者都有义务参与架构和义务去提建议。

现如今，规范的前端架构流程主要分为以下几种：

- 选用哪种基础框架
- 业务代码如何规划
- UI组件如何规划
- 样式和主题如何规划
- 构建方案怎样
- 人员如何协作
- ....

![arch-bg](http://i.imgur.com/ZqeSp8c.jpg)

特别是基础框架这个环节，如果把一个项目的软件架构看成一棵大树的话，那么基础框架就是树干，重要性显而易见，使用一种框架，首先要考虑团队的整体水平，其次它能不能把业务解耦的很好，进而在框架版本更新时如何迁移，这些都要在基础架构设计时必须要考虑的。

而对于大型的 Web 应用，最关键的两点在于：

**可控**，组件化是一种解决方案，我们要的是两种东西可控，一种是组件之间的关系，一种是组件内部的数据，这两者，不同框架有不同策略去做，并无高下之分，主要还是取决于使用者的水平。

**高效**，目前从开发效率讲，带双向绑定的框架无疑为开发者节省了大量的成本。

#### 代码层面

Code Review & 代码规范

#### 架构层面

这方面考察架构的可扩展性是否受到制约，比如考察未来半年内的产品需求或者功能能否快速的上线就是一个标准。

**模块划分**

**技术选型**

同样，框架选型也是如此，Angular、React、Vue等 MVVM 框架一时炙手可热，在项目的技术选型时，必须对整个技术架构考虑周全，包括可扩展性、可测试性等等。所谓框架，只是帮助我们解决问题的工具，提高开发效率，我们需要的是学习框架的思想，不要过度依赖框架。

框架的选择要根据适当的业务场景，如果 Jquery 最适合当前的业务，那就是最好的选择。前端架构师的工作就是不断探索和评估新的技术、平台、方法和框架。

永远要记住一点，当你身为软件架构师去做架构设计的时候，要根据业务场景、团队水平和未来项目架构伸缩性去选择合适的框架，而不是一味的推崇框架门派而去选择框架，你是使用框架，而不是被框架使用。

**代码加载策略**


#### 协议层面



#### 综合


**性能（缓存）**


**内存管理**

### 架构的组织维度
 
#### 目录层面

利用操作系统与生俱来的目录结构，合理规划目录结构，是好的架构实现基础。

#### 页面层面

页面层面，顾名思义就是用来组织视图的，也就是我们常说的 HTML。

#### 功能层面

这个层面比较特殊，打个比方，最简单的网站，可以是单个文件或者多个相关功能的聚合，而当系统逻辑和业务过于复杂时，这一点就比较考验架构师的组织能力和对业务架构的前瞻性。

#### 组件化和设计模式层面

上面提到，当一个逻辑需要被多次使用时，我们就要开始组件化和抽象。

### 架构的落地



### 架构的维护

从流程管理来讲，前端架构的职责是明确前端开发的各个环节，从需求分析到原型设计，到具体的代码提交和测试，再到最终的部署和维护。

在自动化和工程化日益完善的前端领域，你可以采用更先进的方法，通过设计更加完善细致的自动化流程，才能构建出更加高效、更加健壮和可扩展的应用。具体来说，包括工作流设计、团队协作工具、构建工具、持续集成等等。

#### 自动化

#### 优化

#### 相关文档


#### 世界上没有完美的软件，就不存在完美的系统，一个成熟的 Web 系统是不断的迭代后衍生出来的，虽然期间你要去解决大量的未知的问题；生活也是一样，精彩在于它的未知，重要让你去体验其中的美好，虽然过程是曲折的，道路布满荆棘，但结局总是好的。

